---
title: "Importing Spreadsheet-Like Data"
subtitle: "RAdelaide 2025"
author: "Dr Stevie Pederson"
institute: |
  | Black Ochre Data Labs
  | The Kids Research Institute Australia
date: "2025-07-08"
date-format: long
bibliography: bibliography.bib
title-slide-attributes:
    data-background-color: "#3d3d40"
    data-background-image: assets/bodl_logo_white_background.jpg
    data-background-opacity: "0.3"
    data-background-size: "90%"
editor: source
format: 
  revealjs:
    theme: [bodl.scss]
    code-line-numbers: false
    width: 1280
    height: 720
    sansfont: Times New Roman
    logo: assets/bodl_logo_white_background.jpg
    slide-number: c
    show-slide-number: all
  html: 
    css: [bodl.scss, extra.css]
    output-file: import.html
    embed-resources: true    
    toc: true
    toc-depth: 2
include-after: |
  <script type="text/javascript">
    Reveal.on('ready', event => {
      if (event.indexh === 0) {
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
    });
    Reveal.addEventListener('slidechanged', (event) => {
      if (event.indexh === 0) {
        Reveal.configure({ slideNumber: null });
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
      if (event.indexh === 1) { 
        Reveal.configure({ slideNumber: 'c' });
        document.querySelector("div.has-logo > img.slide-logo").style.display = null;
      }
    });
  </script>    
knitr: 
  opts_chunk: 
    echo: true
    include: true
    warning: false
    message: false
    fig.align: center  
---

# Importing Data {background-color="#3d3d40" background-image=https://github.com/rstudio/hex-stickers/blob/main/PNG/readr.png?raw=true background-size="30%" background-opacity="0.4" background-position='70% 50%'}

::: {.notes}
Now that we've spent some time exploring the penguins dataset, how would we import this into R from a spreadsheet?
:::

## Data In R

- Working with data in R is **very different** to Excel
- Can have complicated structures or be simple (e.g. `x <- 1:5`)
- Spreadsheet-like data is very common
- Is known as a `data.frame`
    - A common variant is known as a `tibble` 
    + These were originally called `tbl_df` objects referring to SQL tables
    + Is just a `data.frame` with some convenience features
    
## Data In R {.slide-only .unlisted}

- We import the data as an `R` object
    - All analysis is performed on the `R` object
    - **Almost never** modify the source file
- Once data is imported the source file is no longer involved

## Common File Types
    
::: {.notes}
- Probably worth noting the many European countries use the comma as a decimal point
- Can also separate using a semi-colon
- Windows hiding file extensions as a fundamentally dumb idea
:::
    

- Excel files (`xls`/`xlsx`) have one or more spreadsheets
    + Can import one sheet at a time using `library(readxl)`
- Comma-separated Values (`.csv`)
    + Plain text file
    + Column-style data with commas delimiting the columns
- Resemble a single spreadsheet but:
     + No formatting
     + No formulas $\implies$ only values
     + No graphs/figures
     
## Common File Types {.slide-only .unlisted}
     
- Tab-separated Values (`.tsv`)
    + Like a `.csv` but with tabs separating columns
- Sometimes see files saved as `.txt`
    + Can be anything $\implies$ need to check

## Importing Data

When importing data into `R`:

::: {.incremental}

- *Cell formatting will be ignored by R*
- *Plots will also be ignored*
- Blank rows/columns are not fatal, just annoying
- Mixtures of numbers and text in a column
    + `data.frame` columns contain all the same type of value
- Deleted cells are sometimes imported as blank rows/columns
- Comma-separated or tab-separated files are often favoured for `R`
    + i.e. plain text, or *just the data*
    
:::    

::: {.notes}
- Can also import data from Stata, SPSS or other statistical languages
:::
    
## Other Common Excel Issues

If we're not careful:

::: {.incremental}

1. Excel thinks everything is a date:
    + Septin genes are now officially named *SEPTIN2* etc (not *SEPT2*)
    + Fractions are also **not** dates...
2. Excel will remove leading zeroes (e.g. phone numbers, catalog ids)
3. No record of any steps we've performed by clicking on something

:::

::: {.fragment}

- Very common sources of broken data $\implies$ may need fixing
- '000s of publications with dates for gene names in results

:::

::: {.notes}
Mention my former collaborator who would often have completely different results in the ones I'd send him
- To sort by p-value, he'd select the p-value column & sort (just that column)
- There was no record of this. Only discovered by sitting down with him
:::

## Preparation

1. `File` > `New File` > `R Script` (Or `Ctrl+Shift+N`)
2. Save as `ImportPenguins.R`

## Preparation {.slide-only .unlisted}


1. Download the file `data.zip` from the workshop homepage
2. Place in your directory `RAdelaide25`
3. `Extract to here` which should create a folder named `data`

::: {.callout-tip collapse="true"}
### Make sure your files are in `data` not in `data/data`
:::
    
::: {.fragment}    
    
4. This should contain all files for the workshop
5. Navigate to the `data` directory using the `Files` pane

(You should see `penguins.csv` in `data`)

:::

# Import Using the GUI {background-color="#3d3d40"}

## Importing Data

1. Preview the file `penguins.csv` by clicking on it (`View File`)
    + Try in Excel if you prefer, but **DO NOT(!!!)** save anything from Excel
    
::: {.fragment}

- This is a common dataset as a simple `.csv` file
- This type of data is very easy to manage in `R`
    - Plain text with comma delimiters
    - Simple column structure with column names
    - No blank rows at the top or separating sub-tables
    - No blank columns
    - No rownames

:::

## Using the GUI To Load Data 

::: {style="font-size:95%"}

Click on `penguins.csv`, choose `Import Dataset` then **stop**! &#128721;

![](assets/importGUI.png){width="950px"}


<p style="text-align: center;">(Click `Update` if you don't see this)</p>

:::

## The Preview Window

<br>

![We have a preview of the data](assets/importGUI_preview.png){width="950px" fig-align='left'}

::: {.notes}

- This is another preview of the data before we import it
- We can see all the expected columns
- Notice the types of values are provided under the column names
    
:::

## The Preview Window {.slide-only .unlisted}

<br>

![We also have a preview of the code we're about to execute](assets/importGUI_code.png){width="950px" fig-align='left'}


## The Preview Window {.slide-only .unlisted}

1. Select and copy all the code in the `Code Preview` Box
    + We'll paste this somewhere in a minute...
    
::: {.fragment}
2. Click `Import`

:::
::: {.fragment}

3. Magic happens!!!
    + Ignore the coloured text. This is just 'helpful information'
    
:::
::: {.fragment} 

<br>
*Now paste the copied code at the top of your script*
:::

## What just happened? 

The code we copied has 3 lines:

```{r import-code, eval=FALSE}
#| code-line-numbers: '1'
library(readr)
penguins <- read_csv("data/penguins.csv")
View(penguins)
```

- `library(readr)` loads the package `readr` 
    + Packages are collections (i.e. libraries) of related functions
    + All `readr` functions are about importing data
- `readr` contains the function `read_csv()`
- `read_csv()` tells R what to do with a csv file
    
## What just happened? {.slide-only .unlisted}

The code we copied has 3 lines:

```{r import-code2, eval=FALSE}
#| code-line-numbers: '2'
library(readr)
penguins <- read_csv("data/penguins.csv")
View(penguins)
```

- This line actually loads the data into your `R Environment`
- It creates an object named `penguins` by using the file name (penguins.csv)
- Can change this name if we wish


## What just happened? {.slide-only .unlisted}

The code we copied has 3 lines:

```{r import-code3, eval=FALSE}
#| code-line-numbers: '3'
library(readr)
penguins <- read_csv("data/penguins.csv")
View(penguins)
```

- Opens a preview in a familiar `Excel-like` format
    + I personally never use this

Close the preview by clicking the cross

## What just happened? {.slide-only .unlisted}

- We have just loaded data using the default settings of `read_csv()`
- The object `penguins` is now in our `R Environment`
    + The original file remains on our HDD **without modification**!!!
- The code is saved in our script <br> $\implies$ **we don't need the GUI for this operation again!**

## Let's Demonstrate

::: {.notes}
Realistically we only need to preview it the first time. Having that preview open every time actually ends up being really annoying
:::

1. In the `Environment Tab` click the broom icon &#129529;
    + This will delete everything from your `R Environment`
    + It won't unload the packages
    
::: {.fragment} 
    
2. Highlight the code we've just pasted and click `Run`
    + Reloading the packages won't hurt
    
:::
::: {.fragment} 
    
3. Check the `Environment Tab` again and `penguins` is back

:::
::: {.fragment}

You can delete the line `View(penguins)`

:::

## Our First R Script

- This is now our first R script
    + An R script is a plain text file
    + No objects are stored
    
::: {.fragment}

- Individual lines can be run using `Ctrl/Cmd + Enter`
- Can select multiple lines & run 

:::

## Our First R Script {.slide-only .unlisted}

- Insert a new line before `library(readr)` then type

``` r
## Load packages first
```

::: {.fragment} 
- This is a comment $\implies$ no executable code
    + Communicates to "future" you what you're doing
    + Only needs a single `#` to be a comment
    
:::
    
## Our First R Script {.slide-only .unlisted}

- Insert a line after `library(readr)` then enter

``` r
## Now load the file "penguins.csv"
## Taken from https://allisonhorst.github.io/palmerpenguins/index.html
```


# Data Frame Objects {background-color="#3d3d40" background-image=https://github.com/rstudio/hex-stickers/blob/main/PNG/tibble.png?raw=true background-size="30%" background-opacity="0.4" background-position='70% 50%'}

## Data Frame Objects

- The object `penguins` is known as a `data.frame`
    + Very similar to an SQL table
- `R` equivalent to a spreadsheet
    - **Must** have column names
    - row names becoming less common (sometimes just the row numbers)
    - Missing values (blank cells) are usually filled with `NA`

## Data Frame Objects {.slide-only .unlisted}

Instead of `View()` $\implies$ preview by typing the object name


```{r import-penguins, echo=FALSE, include=FALSE}
library(readr)
penguins <- read_csv(here::here("data/penguins.csv"))
```


```{r print-penguins}
penguins
```

## Data Frame Objects {.slide-only .unlisted}


Gives a preview up to 10 lines with:

::: {.incremental}

- The object type: `A tibble`
- The full dimensions: `60 X 3`
- Column names: `r pander::pander(colnames(penguins))`
- Data types: `<chr>`, `<chr>`, `<dbl>` etc

:::


::: {.fragment}
I personally find this more informative than `View()`
:::

## Tibble Objects

- `readr` uses a variant called a `tbl_df` or `tbl` (pronounced tibble) 
    + A `data.frame` with convenient features
    + Similar to a SQL table
    + Can *only have row numbers for row names*
    + Is a foundational structure in the `tidyverse`


## The Tidyverse


- The `tidyverse` is a collection of *thematically-linked* packages
    + Produced by developers from RStudio/Posit
    + Often referred to as *tidy*-programming or similar
- Calling `library(tidyverse)` loads multiple key packages
    + `readr` is one of these $\implies$ usually just load the tidyverse
    + Will load `dplyr`, `tidyr`, `readr`, `ggplot2` + others
    

## The Tidyverse {.slide-only .unlisted}

1. Replace `library(readr)` with `library(tidyverse)`
2. Execute this line

::: {.fragment}

- This will load all core packages from the tidyverse
- Reloading a package has no effect (is ignored)

:::

## Previewing Objects

- Some additional ways to inspect tibbles are:

```{r, eval=FALSE}
head(penguins)
glimpse(penguins)
```

::: {.fragment}

- `glimpse` is loaded with `library(tidyverse)`

**What were the differences between each method?**

:::

# Functions {background-color="#3d3d40"}

## Functions in `R`

```{r, eval=FALSE}
head(penguins)
glimpse(penguins)
```

- Here we have called the functions `head()` and `glimpse()`
    + They were both executed on the object `penguins`

::: {.fragment}

- Call the help page for `head()`

``` r
?head
```

(if you get multiple options, choose the one from `utils`)

:::

## Functions in `R` {.slide-only .unlisted}

- The key place to look at is

```r
head(x, ...)
## Default S3 method:
head(x, n = 6L, ...)
```

- there are two arguments to `head()` $\implies$ `x` and `n`
    + `x` has no default value $\implies$ **we need to provide something**
    + `n = 6L` means `n` has a default value of 6 (L $\implies$ `integer`)
    
::: {.notes}
Execute `head()` to show the error!!!
:::

## Functions in `R` {.slide-only .unlisted}

Lower down the page you'll see

**Arguments**

`x`	&nbsp;&nbsp; an object<br>
`n` &nbsp;&nbsp; an integer vector of length up to dim(x) (or 1, for non-dimensioned objects). *Blah, blah, blah...*

::: {.fragment}

- Some of the rest is technical detail (can sometimes be *very helpful*)

:::

## Function Arguments

- `head()` prints the *first part* of an object
- Useful for very large objects (e.g. if we had 1000 penguins)

::: {.fragment}
- We can change the number of rows shown to us

```{r}
head(penguins, 4)
```
:::

## Function Arguments {.slide-only .unlisted}

- If passing values *in order* $\implies$ no need for names

::: {.fragment}
```{r}
head(penguins, 4)
head(x = penguins, n = 4)
```
:::

## Function Arguments {.slide-only .unlisted}

- If we explicitly name arguments $\implies$ can pass *in any order*

```{r}
head(n = 4, x = penguins)
```

## Function Arguments {.slide-only .unlisted}

- Check the help page for `glimpse()`
    + This is from the package `pillar`
- Try changing the `width` argument to see what happens
    + Default value auto-detects screen width


## Understanding `read_csv()` 

- Earlier we called the `R` function `read_csv()`
- Check the help page

```{r, eval = FALSE}
?read_csv
```

- We have four functions shown but stick to `read_csv()`

## Understanding `read_csv()` {.slide-only .unlisted}

::: {style="font-size: 90%;"}

```r
read_csv(
  file, 
  col_names = TRUE, col_types = NULL, col_select = NULL,
  id = NULL, locale = default_locale(), 
  na = c("", "NA"), quoted_na = TRUE,
  quote = "\"", comment = "",
  trim_ws = TRUE,
  skip = 0, n_max = Inf,
  guess_max = min(1000, n_max),
  name_repair = "unique",
  num_threads = readr_threads(),
  progress = show_progress(),
  show_col_types = should_show_types(),
  skip_empty_rows = TRUE,
  lazy = should_read_lazy()
)
```

::: {.incremental}

- This function has *way too many arguments* (`file`, `col_names` etc.)
- Most have default values given<br>`col_names = TRUE` $\implies$ column names assumed as the first row

:::

:::

::: {.notes}
- Ask which arguments have default before moving to the fragment...
:::

## Understanding `read_csv()` {.slide-only .unlisted}

All `arguments` were defined somewhere in the GUI.

1. Open the GUI Preview by clicking on the file again
2. Uncheck the `First Row as Names` check-box

::: {.fragment}

- *What happened to the code?*
- *How did the columns change?*
    
:::
::: {.fragment} 

Try clicking/unclicking a few more & try understand the consequences
:::

## Understanding `read_csv()` {.slide-only .unlisted}

- Column types can also be set using shorthand
   + "ccnnnncn" is a mix of character & number columns

```{r}
penguins <- read_csv("data/penguins.csv", col_types = "ccnnnncn")
```

- Changing one of the character columns to "n" will lead to `NA`s
- Changing the numeric column to character would mean ... ?



# Closing Comments  {background-color="#3d3d40"}

## `read_csv()` Vs `read.csv()`

::: {style="font-size: 95%;"}

- `RStudio` now uses `read_csv()` from `readr` **by default**
- You will often see `read.csv()` (from `utils`) in older scripts 
- The newer (`readr`) version is:
    + slightly faster
    + **more user-friendly**
    + handles large files more efficiently via indexing
    + gives informative messages
    
::: {.fragment}

- Earlier functions in `utils` are `read.*()` (csv, delim etc.)
- `readr` has the functions `read_*()` (csv, tsv, delim etc.)
- I *always* use the newer ones

:::

:::

## Reading Help Pages: Bonus Slide {visibility='hidden'}

- The bottom three functions are simplified wrappers to `read_delim()`
- `read_csv()` calls `read_delim()` using `delim = ","`
- `read_csv2()` calls `read_delim()` using `delim = ";"`
- `read_tsv()` calls `read_delim()` using `delim = "\t"`

<br>
__What function would we call for *space-delimited* files?__

## Loading Excel Files

- The package `readxl` is for loading `.xls` and `xlsx` files.
- Not part of the core tidyverse but **very** compatible

```{r}
library(readxl)
```

::: {.fragment}

- The main function is `read_excel()`

```{r, eval=FALSE}
?read_excel
```

:::

## Loading Excel Files {.slide-only .unlisted}

- This file contains multiple sheets

```{r}
excel_sheets("data/RealTimeData.xlsx")
```

::: {.notes}
I found this file after a random Google search for RT-PCR and Excel about 10 years ago.
I didn't keep track of who created it...
:::

::: {.fragment}

- Once again we can click on the file $\implies$ `Import Dataset`
    + `Sheet1` looks pretty simple
    + First column has no name
    
:::    
::: {.fragment}

- Use the drop-down menu to look at the `Sheet2` & `Sheet3`
- We'll learn how to manage these as challenges later

::: 

