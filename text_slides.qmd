---
title: "Working With Text"
subtitle: "RAdelaide 2025"
author: "Dr Stevie Pederson"
institute: |
  | Black Ochre Data Labs
  | Telethon Kids Institute
date: "2025-07-09"
date-format: long
bibliography: bibliography.bib
title-slide-attributes:
    data-background-color: "#3c3c44"
    data-background-image: assets/bodl_logo_white_background.jpg
    data-background-opacity: "0.3"
    data-background-size: "90%"
editor: source
format: 
  revealjs:
    theme: [bodl.scss]
    code-line-numbers: false
    width: 1280
    height: 720
    sansfont: Times New Roman
    logo: assets/bodl_logo_white_background.jpg
    slide-number: c
    show-slide-number: all
  html: 
    css: [bodl.scss, extra.css]
    output-file: text.html
    embed-resources: true    
    toc: true
    toc-depth: 1    
include-after: |
  <script type="text/javascript">
    Reveal.on('ready', event => {
      if (event.indexh === 0) {
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
    });
    Reveal.addEventListener('slidechanged', (event) => {
      if (event.indexh === 0) {
        Reveal.configure({ slideNumber: null });
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
      if (event.indexh === 1) { 
        Reveal.configure({ slideNumber: 'c' });
        document.querySelector("div.has-logo > img.slide-logo").style.display = null;
      }
    });
  </script>    
knitr: 
  opts_chunk: 
    echo: true
    results: hide
    include: true
    warning: false
    message: false
    fig.align: center  
    fig.height: 6
    fig.width: 8  
---

# Text Strings {background-color="#3c3c44" background-image=https://stringr.tidyverse.org/logo.png background-size="40%" background-opacity="0.5" background-position="75% 30%"}

## Text Manipulation

- Start a new R script: `text.R`

```{r}
library(tidyverse)
```

- Next, create the vector we'll mess around with

```{r}
## Create a character vector for this session
x <- c("Hi Mum", "Hi Mother", "Hello Maternal Parent")
```
 

## Text Manipulation

- Working with `character` vectors
- One of the most common and regular tasks
    + Cleaning up column names
    + Cleaning up data
    + Tidying up text on plots
    
. . .

- Particularly relevant when working with IDs
    + May appear as `Run 1` in one file and `Run_001` in another
- Data providers often have their ID formats and edit the ones provided
    + Need to identify & extract/modify
    
    
## Regular Expressions

- We're mostly familiar with words
    + Regular Expressions (`regexp`) are incredibly powerful tools in this space
    + `regexp` syntax is not unique to `R`
    + `R` does have a few unique "quirks" though
    
. . .

- Will progress to categorical data $\implies$ *factors*


## Text Manipulation

- The package `stringr` contains functions for text manipulation 
- Key Functions:
    + `str_detect()`
    + `str_remove()`
    + `str_extract()`
    + `str_replace()`
- Alternatives to `grepl()`, `grep()`, `gsub()` etc. from `base`

## `stringr::str_detect()`

- `str_detect()` returns a logical vector
    + Same length as the input vector

```{r}
## Return a logical vector where 'x' matches the pattern 'Mat'
str_detect(string = x, pattern = "Mat")
```

. . .

- When using *regular expressions* `.` functions as a wildcard
    + `*` has a different meaning

```{r}
## Return a logical vector where 'x' matches the pattern 'M?t'
str_detect(string = x, pattern = "M.t")
```



## `stringr::str_remove()`

- To remove words or patterns

```{r}
str_remove(x, "M")
str_remove(x, "Hi ")
str_remove(x, " ")
```

. . .

- Why did that last one only remove the first space?

## `stringr::str_remove_all()`

- `str_remove()` will only remove the first match
- `str_remove_all()` will remove *all* matches

```{r}
str_remove_all(x, " ")
```

. . .

- Using `regex` syntax $\implies$ pass sets of letters using `[]` syntax
    
```{r}
## Remove all vowels
str_remove_all(x, "[aeiou]")
## Remove only the first vowel
str_remove(x, "[aeiou]")
```

## `stringr::str_remove_all()`

- These allow us to specify wild cards more carefully

```{r}
str_remove_all(x, "M[aeiou]t")
str_remove_all(x, "[ae]r")
```

## `stringr::str_extract()`

- Removing strings has limited use $\implies$ extracting more useful

```{r}
str_extract(x, "H[aeiou]")
str_extract(x, "H[a-z]")
```

. . . 

- These look very similar $\implies$ second opens possibilities

## `stringr::str_extract()`

- In *regular expressions* we can extend a match using `+`<br>$\implies$ match one or more characters

```{r}
str_extract(x, "H[a-z]+")
```

- This will match the first `H` and then all following lower-case letters
    + The match stops at the whitespace $\implies$ not in the set of characters `[a-z]`


## `stringr::str_extract()`

- Repeat the match starting with "M"

```{r}
str_extract(x, "M[a-z]+")
```

. . .

- If we change the lower-case set to a `.` $\implies$ match anything

```{r}
str_extract(x, "M.+")
```


## `stringr::str_extract()`

- We can also specify the exact number of times for a match

```{r}
str_extract(x, "H.+ M[a-z]{2}")
str_extract(x, "H.+ M[a-z]{3}")
```

. . .

- The second pattern expects a 4 letter word starting with M
    + Returns `NA` if no match
    

## `stringr::str_extract_all()`

- `str_extract()` will only return the first match

```{r}
str_extract(x, "[Hh].")
```

. . .

- `str_extract_all()` returns **all matches**

```{r}
str_extract_all(x, "[Hh].")
```

. . .

- Note that now we have a list of the same length as `x`
    + Each element contains all matches within the initial string

::: {.notes}
Will talk in detail about lists tomorrow
:::


# Regular Expressions {background-color="#3c3c44"}

## Regular Expressions

- We're mostly familiar with matching words
    + `regex` allows more powerful matching
- Can include wildcards (`.`)
- Can specify sets of values (`[a-z]`)
    + `[A-Z]` for upper-case
    + `[0-9]` for numbers
    + `[:alnum:]` represents all alpha-numeric characters
- Can extend matches using `+` for one or more
    + None or more can be specified using `*`

## Regular Expressions

- In logical testing, the symbol `|` means `OR`
- Can also be incorporated into patterns

```{r}
## Extract the pattern 'Hi' or 'Hello'
str_extract(x, "Hi|Hello")
## Extract the pattern 'Mum', 'Mother' or 'Maternal'
str_extract(x, "Mum|Mother|Maternal")
```


## Regular Expressions

- Also allows for patterns to be anchored
    + `^` anchors a match to the start
    + `$` anchors a match to the end
    
```{r}
## Extract the first word
str_extract(x, "^[:alnum:]+")
## Or the last word
str_extract(x, "[:alnum:]+$")
```

## Regular Expressions

- To thoroughly confuse everyone: `^` has a second meaning
    + Inside `[]` it means *not*
    
```{r}
## Match a pattern at the end which doesn't contain a space
str_extract(x, "[^ ]+$")
```

. . .

- Regular expressions are fun to write [<br>$\implies$*horrible to read back*!]{.framgent}


## `stringr::str_view()`

- We can check our matches in detail using `str_view()`

```{r}
str_view(x, "r")
str_view(x, "r$")
str_view(x, "M[aeiou]t")
str_view(x, "^[^ ]+", match = NA, html = TRUE)
```


## `stringr::str_replace()`

- `str_replace()` is used for extracting/modifying text strings
    + Even more powerful than `str_extract()`

```{r}
str_replace(x, pattern = "Mum", replacement = "Dad")
```

1. Searching the `string` "Hi Mum" for the `pattern` "Mum", and
2. Replacing the first instance of "Mum" with "Dad"

## `stringr::str_replace()`

- Wildcards and character sets work in the exact same manner

```{r}
str_replace(x, "M[a-z]", "Da")
str_replace(x, "[M].{2}", "Dad")
str_replace(x, "[M].+", "Dad")
```

## `stringr::str_replace()`

- The use of *capturing patterns* makes this extremely flexible
- We can capture words/phrases/patterns using `(pattern)` inside braces
    + Captured patterns are able to be returned in numeric order of capture
    + In the following, we capture only one pattern

```{r}
str_replace(x, "H.+ (.+)", "\\1")
```

. . . 

- Now let's capture two patterns

```{r}
str_replace(x, "(H.+) (M.+)", "\\2! \\1!")
```


## `stringr::str_replace()`

- `str_replace()` only replaces the first match in a string
- `str_replace_all()` replaces **all** matches

```{r}
str_replace(x, "[Mm]", "b")
str_replace_all(x, "[Mm]", "b")
str_replace_all(x, "[a-z]", "*")
```

## Brief Summary

- `str_detect()` $\implies$ logical vector
- `str_remove()` / `str_remove_all()` $\implies$ remove matching patterns
- `str_extract()` $\implies$ extract matching patterns
- `str_replace()` / `str_replace_all()` $\implies$ modify a character vector

## Brief Summary

- All `regex` based operations
- Can all be piped

```{r}
c("M", "F", "MAle", "Female") |> str_extract("^[MF]")
```

. . .

- *Regular Expressions* are very powerful
- Horrible to read
- Exist in all languages $\implies$ not specific to R


# Additional Functions {background-color="#3c3c44" background-image=https://stringr.tidyverse.org/logo.png background-size="40%" background-opacity="0.5" background-position="75% 30%"}


## More Helpful Functions

```{r}
str_count(x, "[Mm]")
str_length(x)
str_to_lower(x)
str_to_upper(x)
str_split_fixed(x, pattern = " ", n = 2)
str_wrap(x, width = 8)
str_starts(x, "Hi")
str_ends(x, "[rt]")
str_flatten(x, collapse = "; ")
str_trunc(x, width = 7)
str_to_title("a bad example")
```

## More Helpful Functions

- Pseudo-numeric strings are also handled well

```{r}
str_pad(c("1", "10", "100"), width = 3, pad = "0")
str_sort(c("1", "10", "2"))
str_sort(c("1", "10", "2"), numeric = TRUE)
```


## Additional Tools and Tricks

- The function `paste()` is a very useful one
    + The default separator is `" "`
    + `paste0()` has the default separator as `""`

```{r}
paste(x, "How are you?")
paste(x, "How are you?", sep = ". ")
paste0(x, "!")
paste(x, collapse = "! ")
```

## Additional Tools and Tricks

- The package `glue` has revolutionised text manipulation
    + We can pass R objects or function calls to the middle of a text string
    + We do need to be careful with quotation marks here

```{r}
library(glue)
glue("When they answered, I said '{x}!'")
glue("I call them {str_remove(x, 'H.+ ')}")
glue_collapse(letters, sep = ", ", last = " & ")
```

. . . 

- Output is of class `glue`
    + Coerces back to `character`
    + Plays very well with advanced `tidyverse` syntax (e.g. `rlang`)


## Working With Strings

- Is an incredibly common and important part of working with R
- Extract sample IDs from file names
- Pull key information from columns
- Remove prefixes/suffixes
- Correct data entry errors
- Format for pretty plotting

## Challenges: Slide 1


1. Given a vector of Transcript IDs with versions, remove the version number?

```{r}
ids <- c("ENST00000376207.10", "ENST00000376199.7")
```

2. Add the 'chr' prefix to these chromosomes

```{r}
chr <- c(1:22, "X", "Y", "M")
```

3. Pull the chromosome out of these cytogenetic bands

```{r}
cyto <- c("Xp11.23", "11q2.3", "2p7.1")
```

4. Change these phone numbers to start with `+61` instead of `0`

```{r}
phones <- c("0499123456", "0498760432")
```

## Challenges: Slide 2

5. Remove the suffix ".bam" from these filenames

```{r}
bams <- c("rna_bamboo1.bam", "rna_rice1.bam", "rna_wheat1.bam")
```

6. Correct the responses to be consistent (choose the format)

```{r}
response <- c("Y", "yes", "No", "no")
```

7. Correct these recorded values to be consistently `M/F` or `Male/Female`

```{r}
sex <- c("M", "male", "femal", "Female")
```


# Factors {background-color="#3c3c44" background-image=https://forcats.tidyverse.org/logo.png background-size="40%" background-opacity="0.5" background-position="75% 30%"}

## Factors

A common data type in statistics is a *categorical variable* (i.e. a `factor`)

- Can appear to be a `character` vector/column
    + Can easily trip an unsuspecting analyst up
- Data will be a set of common groups/categories

```{r}
pet_vec <- c("Dog", "Dog", "Cat", "Dog", "Bird", "Bird")
```

- This is a `character` vector

## Factors

- We can simply coerce this to a vector of factors
- Categories will automatically be assigned alphabetically using `as.factor()`

```{r}
pet_factors <- as.factor(pet_vec)
pet_factors
```

We can manually set these categories as `levels` using `factor()`

```{r}
pet_factors <- factor(pet_vec, levels = c("Dog", "Cat", "Bird"))
pet_factors
```

## Factors

- These are actually stored as integers
- Each integer corresponds to a `level`

```{r, results='hide'}
str(pet_factors)
as.integer(pet_factors)
as.character(pet_factors)
```

## A Potential Pitfall {visibility="hidden"}

**What would happen if we think a `factor` is a `character`, and we use it to select values from a `vector`/`matrix`/`data.frame`?**

. . .

```{r}
names(pet_vec) <- pet_vec
pet_vec
pet_vec[pet_factors]
```

. . .

- `read_csv()` and other `readr` functions always parse text as a `character`
    + Older versions of `read.csv()` parsed text to factors by default
    + Changed with R $\geq$ v4.0.0
- If I want a `factor`, **I explicitly make** a `factor`
   + During statistical analysis `character` vectors are always coerced

## The package `forcats`

- `forcats` is a part of the core `tidyverse`
    + Specifically for wrangling `factors`
    + Also plays very nicely with `stringr`
    
## Some Handy Tricks

- `fct_inorder()` sets categories in the order they appear
    + Sort your `data.frame` then apply `fct_inorder()` for nice structured plots
    
```{r}
fct_inorder(pet_vec)
```
    
. . .
    
- `fct_infreq()` sets categories by their frequency

```{r}
fct_infreq(pet_vec)
```
    
    
## Some Handy Tricks

- Collapse categories with fewer than `n` entries

```{r}
fct_lump_min(pet_vec, min = 3)
```

. . .

- Collapse categories with fewer than `p` entries

```{r}
fct_lump_prop(pet_vec, prop = 0.3)
```

. . .

- Reverse the order (will automatically coerce to a factor)

```{r}
fct_rev(pet_vec)
```

